package cUseSocket.multi;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

public class Server extends JFrame implements ActionListener{
    private Map<Integer, Socket> clients = new HashMap<Integer, Socket>();//???????????
    private JTextArea msg = new JTextArea("?????????\r\n");
    private JButton msgSend = new JButton("????????");
    public Server() {
        // TODO Auto-generated constructor stub
        this.setVisible(true);//???????????
        this.setSize(500, 650);//???????
        this.setLayout(new FlowLayout());//???????????????
        //?????????
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent arg0) {
                // TODO Auto-generated method stub        	
                super.windowClosing(arg0);
                System.exit(0);
            }
        });
        msgSend.addActionListener(this);//????????????
        msgSend.setActionCommand("sendMsg");//?????????????????????
        
        msg.setAutoscrolls(true);
        msg.setColumns(40);
        msg.setRows(30);
//      msg.setPreferredSize(new Dimension(this.getWidth(), 300));

        JScrollPane spanel = new JScrollPane(msg);
        this.add(spanel);
        this.add(msgSend);
    }
    public static void main(String[] args){

        new Server().listenClient();
    }

    public void listenClient(){
        String temp = "";
        // ???????ServerSocket????????8899??
        try {
            ServerSocket server = new ServerSocket(8899);
            // server???????????Socket??????????server??accept??????????????????????            
            while (true) {
                System.out.println("???????????????");
                Socket socket = server.accept();               
                clients.put(socket.getPort(), socket);//??????????????????????Socket???????
                temp = "?????"+socket.getPort()+":????";
                this.apppendMsg(temp);
                new mythread(socket, this).start();
            }

        } catch (Exception e) {
            // TODO: handle exception
            e.printStackTrace();
        }

    }

    //???????????????
    public void apppendMsg(String msg){

        this.msg.append(msg+"\r\n");
    }

    public void sendMsgToAll(Socket fromSocket, String msg) {
        Set<Integer> keset = this.clients.keySet();//???client??key?????Set??????????Key?????Map<>???????SOcket???key
        java.util.Iterator<Integer> iter = keset.iterator();//??Set????????????????????????
        //???????????????
        while(iter.hasNext()){
        	//???????key??????int
            int key = iter.next();
            Socket socket = clients.get(key);
            //????????????????????????????
            if(socket != fromSocket){
                try {
                    if(socket.isClosed() == false){
                        if(socket.isOutputShutdown() == false){
                        	//???????????????
                            Writer writer = new OutputStreamWriter(
                                    socket.getOutputStream(),"GBK");
                            writer.write(msg);
                            writer.flush();
                        }

                    }
                } catch (SocketException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
        }
    }

    //?????????? ???????????????
    @Override
    public void actionPerformed(ActionEvent e) {
        // TODO Auto-generated method stub
        String temp = "";
        if("sendMsg".equals(e.getActionCommand())){
            System.out.println("???????????????");
            Set<Integer> keset = this.clients.keySet();//???Map Clients??key?
            java.util.Iterator<Integer> iter = keset.iterator(); //??????????????Set keset?????iter
            //??key?????????????while????????????????????????????
            while(iter.hasNext()){
                int key = iter.next();//??key?????int key
                Socket socket = clients.get(key);//??Map Client???????key???Socket????
                try {
                    if(socket.isClosed() == false){
                        if(socket.isOutputShutdown() == false){
                            temp = "??????"+socket.getPort()+"???????";
                            System.out.println(temp);
                            Writer writer = new OutputStreamWriter(
                                    socket.getOutputStream(),"GBK");
                            this.apppendMsg(temp);                          
                            writer.write("?????");
                            writer.flush();
                        }
                    }
                } catch (SocketException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
        }
    }

}


//?????????????????????Socket??????????
class mythread extends Thread{

    private Socket socket = null;//????Socket??????????????Socket?????????
    private Server server = null;//???????????????UI
    private InputStreamReader reader = null;
    char chars[] = new char[64];//???????????
    int len;
    private String temp = null;
    public mythread(Socket socket, Server server) {
        // TODO Auto-generated constructor stub
        this.socket = socket;
        this.server = server;
        init();
    }

    //
    private void init(){
        try {
            reader = new InputStreamReader(socket.getInputStream(),"GBK");//?????????,??????????????????
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    @Override
    public void run() {
        // TODO Auto-generated method stub
        System.out.println("???????????");
        //???????????????????????????
        while(true){
            try {
                System.out.println("???"+this.getId()+":??????????????????>");//????????
                //??????????????????????????????????????????
                while ((len = ((Reader) reader).read(chars)) != -1) {
                    temp = new String(chars, 0, len);
                    System.out.println("????????"+socket.getPort()+"?????:" +temp+socket.getInetAddress());
                    server.apppendMsg("????????"+socket.getPort()+"?????:" +temp);//????????????Socket???????????
                    server.sendMsgToAll(this.socket, "?????"+socket.getPort()+"???:" +temp);//????sendMsgToAll??????????????????????????????????
                }
                if(socket.getKeepAlive() == false){
                    ((Reader) reader).close();
//                  temp = "???"+this.getId()+"????>???";
//                  System.out.println(temp);
                    temp = "?????"+socket.getPort()+":???";
                    server.apppendMsg(temp);
                    socket.close();
                    this.stop();
                }
            } catch (Exception e) {
                // TODO: handle exception
                e.printStackTrace();
                try {
                    ((Reader) reader).close();
                    socket.close();
                } catch (IOException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
            }
        }
    }
}