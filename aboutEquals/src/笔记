为什么要有hashCode
我们以“HashSet如何检查重复”为例子来说明为什么要有hashCode：

当你把对象加入HashSet时，HashSet会先计算对象的hashcode值来判断对象加入的位置，
同时也会与其他已经加入的对象的hashcode值作比较，
如果没有相符的hashcode，HashSet会假设对象没有重复出现。但是如果发现有相同hashcode值的对象，
这时会调用equals（）方法来检查hashcode相等的对象是否真的相同。
如果两者相同，HashSet就不会让其加入操作成功。如果不同的话，
就会重新散列到其他位置。（摘自我的Java启蒙书《Head fist java》第二版）。
这样我们就大大减少了equals的次数，相应就大大提高了执行速度。

hashCode（）与equals（）的相关规定
如果两个对象相等，则hashcode一定也是相同的
两个对象相等,对两个对象分别调用equals方法都返回true
两个对象有相同的hashcode值，它们也不一定是相等的
因此，equals方法被覆盖过，则hashCode方法也必须被覆盖
hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，
则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）

为什么两个对象有相同的hashcode值，它们也不一定是相等的？
在这里解释一位小伙伴的问题。以下内容摘自《Head Fisrt Java》。

因为hashCode() 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。
越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 hashCode）。

我们刚刚也提到了 HashSet,如果 HashSet 在对比的时候，
同样的 hashcode 有多个对象，它会使用 equals() 来判断是否真的相同。
也就是说 hashcode 只是用来缩小查找成本。